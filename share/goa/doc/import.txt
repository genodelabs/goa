
                                    Import


                               Johannes Schlatow


The _import_ file defines how to download, extract and patch 3rd-party source
code.


DESCRIPTION
###########

Syntactically, the file is a makefile that merely defines a couple of variables
that steer the import procedure. The file is included by the Genode's ports,
which evaluates the following mandatory variables:

:LICENSE:
  This variable defines the license of the 3rd-party source code.

:VERSION:
  This variable defines the version of the 3rd-party source code.

:DOWNLOADS:
  This variable defines a list of downloads in the form of '<name>.<type>'. The
  <name> part is arbitrary and used for referencing in the URL, DIR and REV
  variables. Supported <type> values are _file_ (a plain file), _archive_ (an
  archive of the types tar.gz, tar.xz, tgz, tar.bz2, or zip), _svn_ (a
  subversion repository), _git_ (a git repository) and _sparse-git_ (a partial
  git repository).

:URL(<name>):
  This variable defines the URL of a certain download.

:DIR(<name>):
  This variable defines the directory relative to the project directory where
  the 3rd-party source code is going to be located.

:SHA(<name>):
  For downloads of type _file_ or _archive_, this variable defines the SHA256
  hash of the downloaded file.

:REV(<name>):
  For downloads of type _git_ or _svn_, this variable defines the revision
  to be checked out.

:SPARSE_PATH(<name>):
  For downloads of type _sparse-git_, this variable defines the subdirectory to
  be used for a sparse checkout

In addition, the following optional variables are available that allow modifying
the directory structure and source code once it has been downloaded.

:DIRS:
  Defines a list of additional directories to be created.

:DIR_CONTENT(<dir>):
  Lists the content of directory <dir>. The paths are relative to the project
  directory and may contain wildcards. Note that <dir> must be present in DIRS.

:PATCHES:
  Defines a list of patch files that are going to be applied to the source code.

:PATCH_OPT:
  Sets command line options supplied to the *patch* command. Default: -p0

:TAR_OPT:
  Set extra command line options supplied to the *tar* when extracting tar
  archives. Default: --strip-components=1

:UNZIP_OPT:
  Set extra command line options supplied to the *unzip* when extracting zip
  archives.

EXAMPLES
########

The following content of an _import_ file instructs Goa to clone a certain git
repository and checkout commit 'ba8881e2c9afb2f2345bd1df8d6b42cd1deadb08'. This
is conducted in the contrib directory. The content is then copied into the
_src/_ subdirectory of the project.

! LICENSE := BSD
! VERSION := 1.2.3
! DOWNLOADS := foobar.git
!
! URL(foobar) := https://...
! REV(foobar) := ba8881e2c9afb2f2345bd1df8d6b42cd1deadb08
! DIR(foobar) := src

Let's assume there are a few patches necessary to adapt the 3rd-party source
code to Genode. These patches are present in the _patches_ subdirectory. Goa is
then instructed to apply all the _*.patch_ files found in this directory to the
checked out source code as follows:

! PATCHES := $(notdir $(wildcard patches/*.patch))

Furthermore, let's assume there is a _background.png_ file needed, which would
like to pack up in a raw archive. The file is present in the checked out git
repository and can be placed into the _raw/_ directory with the following lines
added to the _import_ file:

! DIRS := raw
! DIR_CONTENT(raw) := src/resources/background.png


SEE ALSO
########

add-depot-user, api, artifacts, build-systems, config, index, overview, runtime, targets


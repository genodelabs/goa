#!/usr/bin/env expect

#
# \brief  Tool for assisting the development of Genode applications
# \author Norman Feske
# \date   2019-11-07
#

proc _find_tool_dir { } {
	global argv0

	set path $argv0
	if {[file type $path] == "link"} {

		set link_target [file readlink $path]

		# resolve relative symlink used as symlink target
		if {[file pathtype $link_target] == "relative"} {
			set path [file join [file dirname $argv0] $link_target]
			set path [file normalize $path]
		} else {
			set path $link_target
		}
	}

	# strip binary name and 'bin/' path
	return [file dirname [file dirname $path]]
}

set tool_name [file tail $argv0]
set tool_dir  [file join [_find_tool_dir] "share" "goa"]

# assist the user a bit
if {[llength $argv] == 0} {
	puts stderr "\n  usage: $tool_name help\n"
	exit 1
}


source [file join $tool_dir lib util.tcl]

exit_if_not_installed xmllint git find sed make diff tar wget

source [file join $tool_dir lib command_line.tcl]

source [file join $tool_dir lib actions generic.tcl]

##################
## Main program ##
##################

##
## Show documentation
##

if {$perform(help)} {
	goa help $args(help_topic)
	exit
}


##
## Update Goa
##

if {$perform(update-goa)} {
	goa update $args(switch_to_goa_branch)
	exit
}


##
## List goa versions
##

if {$perform(versions)} {
	puts [avail_goa_branches]
	exit
}




##
## Create and initialize depot directory
##

if {$perform(depot-dir)} {
	goa depot-dir
}


##
## Add depot user
##

if {$perform(add-depot-user)} {
	goa add-depot-user $args(new_depot_user) $args(depot_url) \
	                   $args(pubkey_file) $args(gpg_user_id)
	exit
}


#
# The following commands only work when the current working directory is a goa
# project.
#
if {![looks_like_goa_project_dir $project_dir] && ![has_src_but_no_artifacts $project_dir]} {
	exit_with_error "$project_dir does not look like a goa project" }


source [file join $tool_dir lib actions versions.tcl]

##
# Bump project version
#

if {$perform(bump-version)} {
	goa bump-version $args(target_version)
	exit
}


##
## Show archive versions
##

if {$perform(archive-versions)} {
	goa archive-versions
	exit
}


source [file join $tool_dir lib actions import.tcl]

##
## Diff
##
if {$perform(diff)} {
	goa diff src
	goa diff raw
	exit
}


##
## Import
##
if {$perform(import)} {
	goa import
}


##
## Build-directory preparation
##

source [file join $tool_dir lib actions build.tcl]
source [file join $tool_dir lib actions depot.tcl]

if {$perform(build-dir)} {
	if {[has_src_but_no_artifacts $project_dir]} {
		exit_with_error "$project_dir has a 'src' directory but lacks an" \
		                "'artifacts' file. You may start with an empty file."
	}
}

if {$perform(export)} {

	goa prepare_depot_with_apis
}

# unless explicitly configured, enable strict warnings if using the base API
if {![info exists warn_strict] && [goa using_api base]} {
	set warn_strict 1 }


#
# At this point, a 'src/' directory exists if any source code is part of the
# project or was imported. Should no 'src/' directory exist, the project
# contains merely pkg-runtime content. In this case, we can skip the
# build-related steps.
#
if {![file exists src]} {
	set perform(build-dir) 0
	set perform(build)     0
}


if {$perform(build-dir)} {

	set api_dirs { }
	set lib_src { }

	goa build-dir
}


if {$perform(build)} {

	goa build
	goa extract_artifacts_from_build_dir
	goa check_abis
	goa extract_api_artifacts
}


if {$perform(extract-abi-symbols)} {

	goa extract-abi-symbols
}


source [file join $tool_dir lib actions run.tcl]

if {$perform(run-dir)} {

	source [file join $tool_dir lib run common.tcl]

	set target_file [file join $tool_dir lib run $target.tcl]
	if {$target == "common" || ![file exists $target_file]} {
		exit_with_error "Target '$target' not available (see 'goa help targets')" }

	source $target_file

	goa run-dir
}


if {$perform(run)} {

	# start recording
	set filename [file join $var_dir $project_name.log]
	log_file -noappend $filename

	run_genode

	# stop recording
	log_file

	if {$perform(backtrace)} {
		if {![info exists binary_name]} {
			# try extracting binary name from log
			set fd [open $filename]
			while {[gets $fd line] != -1} {
				if {[regexp {\-\> (.*)\] backtrace} $line dummy binary_name]} {
				}
			}
			close $fd
		}

		if {![info exists binary_name]} {
			exit_with_error "unable to identify binary name for backtrace\n" \
			                "\n You can define the binary name explicitly by " \
			                "\n specifying the '--binary-name <name>' command-line " \
			                "\n argument."
		}

		if {![file exists [file join $run_dir $binary_name]]} {
			exit_with_error "binary '$binary_name' does not exist in run directory" \
			                "\n You can define the binary name explicitly by " \
			                "\n specifying the '--binary-name <name>' command-line " \
			                "\n argument."
		}

		cd $run_dir
		exec [file join $tool_dir lib backtrace] $binary_name >@ stdout < $filename
	}

	exit
}


if {$perform(export)} {

	assert_definition_of_depot_user

	set exported_archives ""
	goa export-api
	goa export-raw
	goa export-src
	goa export-pkgs  exported_archives
	goa export-bin   exported_archives
	if {$debug} { goa export-dbg }
	goa export-index exported_archives

	array set export_projects { }
	goa import-dependencies $exported_archives export_projects
	goa export-dependencies export_projects
}


if {$perform(publish)} {

	set pubkey_file [file join $depot_dir $depot_user pubkey]
	if {![file exists $pubkey_file]} {
		exit_with_error "missing public key at $pubkey_file\n" \
		                "\n You may use the 'goa add-depot-user' command." \
		                "\n To learn more about this command:\n" \
		                "\n   goa help add-depot-user\n" }

	# determine to-be-published archives
	lassign [goa published-archives] archives index_archive

	# download archives from other users that are not present in public
	goa download-foreign $archives

	# add index archive to archives
	if {$index_archive != ""} {
		lappend archives $index_archive }

	# publish archives
	goa publish $archives
}
